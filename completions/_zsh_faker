#compdef faker

# Initialize the associative array
typeset -A module_functions

generate_module_functions() {
  local output
  local module
  local function

  # Run the command and capture the output
  output=$(faker --available-modules)

  # Read the output line by line
  while read -r line; do
    # Check if the line ends with a colon, indicating a module name
    if [[ $line == *: ]]; then
      module=${line%:}
    elif [[ $line == -\ * ]]; then
      # Remove the '- ' prefix and add the function to the module's list
      function=${line#- }
      module_functions[$module]+="$function "
    fi
  done <<< "$output"
}

# Autocomplete function for the first argument (module name)
_faker_module_name_completions() {
  local -a modules
  modules=(${(k)module_functions})
  _describe 'module names' modules
}

# Autocomplete function for the second argument based on the selected module
_faker_function_completions() {
  local selected_module="$words[2]"
  local -a functions

  if [[ -n "$selected_module" && -n "${module_functions[$selected_module]}" ]]; then
    functions=(${(s: :)${module_functions[$selected_module]}})
    _describe 'functions' functions
  else
    _message 'no functions available for the selected module'
  fi
}

# Main completion function
_faker() {
  local context state state_descr line
  typeset -A opt_args

  generate_module_functions

  _arguments -C \
    '1:module name:_faker_module_name_completions' \
    '2:function name:_faker_function_completions' \
    '*:: :->args'

  case $state in
    args)
      _values 'arguments' 'arg1' 'arg2'
      ;;
  esac
}

# Tell Zsh to use this completion function for the faker command
compdef _faker faker
